1. Simple factory pattern

Factory is used to encapsulate the creation of an object. It is usually used when there are multiple possible classes that might be created.
The factory method encapsulate the logic of choosing the correct class and generate the related object.

It is also possible to use a function from base class and override it all the way. Then the "factory" func just need to call
that function and the correct overrided function will be called for the sub classes. The "factory" function will return correct object or operation.

2. Strategy Design Pattern
For an functionality, we can define multiple algorithms/implementation. These algotithms can be called with same strategy. This decouples the client (caller) and the algorithms behind, 
making it easier to change/extend the algorithms and writing tests.

"The Strategy Design Pattern defines a family of algorithms, encapsulating each one, and making them interchangeable. Strategy
lets the algorithm vary independently from the clients that use it."

eg.

public interface TextFormatter {
    public void format(String s);
}

// algorithms
public class LowerTextFormatter implements TextFormatter {
    public void format(String s) {
        System.out.println(s.toLowerCase());
    }
}

public class HigherTextFormatter implements TextFormatter {
    ...............
}

// choose a strategy!!!
public class TextEditor {
    private TextFormatter formatter;
    public TextEditor(TextFormatter formatter) {this.formatter = formatter;}
    
    public void format(String s) {formatter.formt(s);}
}

"The main advantage of the Strategy Design Pattern is that we can enhance the code without much trouble. We can add new text
formatters without disturbing the current code. This would make our code maintainable and flexible. This design pattern also
promotes the "code to interface" design principle."

3 Single Responsibility Principle, SRP
就一个类而言，应当有且仅有一个使其变化的原因。
"every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class."

Don't add all functionalities to one class.

4. Open-closed principle OCP
open for extension, closed for modification
Try to make the design extensiable, but when we need an exension, we shouldn't update the existing class.

5.  Dependency Inversion Principle
High level modules shouldn't rely on low low level modeules. They should all rely on interface (abstraction).
abstraction shouldn't rely on implementation detail. The implementation must follow the abstraction.

http://www.cnblogs.com/gaochundong/p/open_closed_principle.html



-------------------------------------------
proxy 代理模式：为对象c提供一种代理使其可以控制对象a的方法


0------------------------------------------
Dependency Injection
is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, 
into a dependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies 
from its own behavior, which allows program designs to be loosely coupled and to follow the inversion of control and single responsibility
principles.

控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。
面向侧面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、觀點導向編程、剖面導向程式設計）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）
    横向而非纵向的一个方案
对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换 。
