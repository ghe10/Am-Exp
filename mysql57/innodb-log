start from log0log.cc

The whole redo log is done via:
- user thread write to log buffer (maybe page in parallel, not sure exactly how the write to btree happens)
- backgroud thread are flushing logs, these threads seems not using pthread but pure os system calls, not sure why yet
- user trans commit must wait for log flush for durability before ack to user
- mini-trans is used for redo log write (each operation), not sure how it commits though

Next: 
1. dive deep from log0log.cc for basics
2. understand how mtr works during the whole process (which needs coordination with transtraction management strategy as well)

Page is not only storing the real customer data, it also could store logically data like "what is the Btree structure looks like" etc.

Data in the redo log is structured in consecutive blocks of 512 bytes
(_OS_FILE_LOG_BLOCK_SIZE_). Each block contains a header of 12 bytes
(_LOG_BLOCK_HDR_SIZE_) and a footer of 4 bytes (_LOG_BLOCK_TRL_SIZE_).
These extra bytes are also enumerated by lsn values. Whenever we refer to
data bytes, we mean actual bytes of log records - not bytes of headers and
footers of log blocks. The sequence of enumerated data bytes, is called the
sn values. All headers and footers of log blocks are added within the log
buffer, where data is actually stored in proper redo format.

transaction commit need to wait for the redo log to be flushed to the point before confirm commit back to user.

Inlog0log.cc we have some great comments on how the things work and what user thread / background thread do. An important concept is users
can write to log buffer concurrently without synchronize with each other, and thet have to wait if the log buffer/file is full for some reason.

All the flush and check point are done by background thread, user can ask for it and wait but can't do it in user thread

An interesting functional change:
   This is a functional change - the log buffer could be resized dynamically
   by users (also decreased).
   
Redo log consists of following data layers:

-# %Log files (typically 4 - 32 GB) - physical redo files that reside on
   the disk.

-# %Log buffer (64 MB by default) - groups data to write to log files,
   formats data in proper way: include headers/footers of log blocks,
   calculates checksums, maintains boundaries of record groups.

-# %Log recent written buffer (e.g. 4MB) - tracks recent writes to the
   log buffer. Allows to have concurrent writes to the log buffer and tracks
   up to which lsn all such writes have been already finished.

-# %Log recent closed buffer (e.g. 4MB) - tracks for which recent writes,
   corresponding dirty pages have been already added to the flush lists.
   Allows to relax order in which dirty pages have to be added to the flush
   lists and tracks up to which lsn, all dirty pages have been added.
   This is required to not make checkpoint at lsn which is larger than
   oldest_modification of some dirty page, which still has not been added
   to the flush list (because user thread was scheduled out).

-# %Log write ahead buffer (e.g. 4kB) - used to write ahead more bytes
   to the redo files, to avoid read-on-write problem. This buffer is also
   used when we need to write an incomplete log block, which might
   concurrently be receiving even more data from next user threads. In such
   case we first copy the incomplete block to the write ahead buffer.
   
log_start_background_threads() is the key method that goes along with starting background thread for all the log flushing and checkpoint staff
The log related staff has pointer used fro perfromance schema plus a real reference of the object ?

https://s0dev0mysql0com.icopy.site/doc/dev/mysql-server/8.0.12/log0log_8h_source.html

We are using logflush as an example. log flush has a separate thread that does the job.
Key points should be understanded:
- how synchronization happens for flush finish
- how we avoid synchronization between different write from user thread

void log_flusher(log_t *log_ptr) {} is defined in log0write.cc. it uses an endless loop to keep working on log flushing


-------------

for data structure init, log_t Struct is defined in innobase/include/log0types.h

