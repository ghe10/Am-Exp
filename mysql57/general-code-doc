/sql/main.ccï¼š
entry of mysqld server execution

/sql/mysqld.cc
mysqld_main() actually initialized the server and start running

- init my_sys library & pthreads  my_init()
- load default config load_defaults()
- load performance schema related staff, performance schema is a schema that provides data for performance, the implementation is like a separate storage engine: https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_PFS.html#PFS_MAIN_INTRO
- load statements init_sql_statement_names() from com_stat
- init_common_variables() : This is important, it is setting the host, binlog, log file, default storage engine and memory stack usage etc. note that huge pages are planned here
  - #define MYSQLD_ABORT_EXIT 1 will happen if the init failed
- my_thread_attr_setstacksize() and related code is setting thread stack size
- my_setwd() set network directory
- change owner of data directory
- init_server_components() init query cache, table definition, host cache, slaves if we have replication etc
- partitioning_init() is for performance schema
- prepare something for binlog ???
-init_ssl
- network_init() : prepare socket for listening on specfic port fro connection
  - it used to be called handle_connections_sockets() I think 
  - it creates Mysqld_socket_listener(), and create upper layer wrapper of if named as Connection_acceptor()
  - then Connection_acceptor -> init_connection_acceptor() is called -> setup_listener() in /sql/socket_connection.cc
  -   mysqld_socket_acceptor->connection_event_loop(); is called in line 4955 in main to start a regular endless wait loop in main thread( potentially more threads and accept connection)
  -   note hat a lot of things are done in the middle for prepare to reach the init of the connection acceptor
  https://dev.mysql.com/doc/internals/en/guided-tour-skeleton.html
  
- create pid file
- reload_optimizer_cost_constants() load optimizer config from config file
- servers_init() defined in sql_servers.cc      servers_init(0); is in 4820, connection_event_loop is after this
- perfromace schema related check
- execute_ddl_log_recovery() !!!!!!
- start_processing_signals();
- bootstrap() ???
- read and execute init file read_init_file()
- start_handle_manager();
- create_compress_gtid_table_thread();
- start_processing_signals(); note that signal handler has the ability to kill the listener
- terminate_compress_gtid_table_thread()
- my_thread_join() waiting mysql to terminate, then join the thread and exit with success if possible


/sql/handler.h or .cc:
These files now include the handlers for mysql storage engines including innodb, ndb is not here
Note this is different from what is in 5.1 where each engine has its own handler https://dev.mysql.com/doc/internals/en/guided-tour-majordir-sql.html
- the above might be wrong as innobase has its own handler file and ha_xxx files.

/storage/innobase/hd_innodb.h: 
  /** The class defining a handle to an InnoDB table */
   class ha_innobase: public handler
   
   This indicates storage engine needs to inherite handler class. 

   handler.h is in /sql/ folder and has the following definition: 
   class handler :public Sql_alloc
   {
      friend class Partition_handler;
      ....
