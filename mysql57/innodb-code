innobase_start_or_create_for_mysql() is the init start for innodb server

innobase/jandler/ja_innodb.cc is the handler for innodb plugin, its innobase_init is calling innobase_start_or_create_for_mysql to initialize innodb.

Innodb has its thread pool, os threads, buffer pool ready before return to mysql server that it is ready. We don't need all the details here.

/* The InnoDB handler: the interface between MySQL and InnoDB. */

read ha_innobase::write_row() as example from innobase/handler/ha_innobase.cc


m_prebuilt = row_create_prebuilt(ib_table, table->s->reclength); ï¼š initialized a long list of staff, struct defined in rwo0mysql.cc

top layer of innodb call:
ha_innobase::write_row() ->
-> row_insert_for_mysql() in rwo0mysql.cc -> row_insert_for_mysql_using_ins_graph()
  -> row_get_prebuilt_insert_row()
  -> row_mysql_convert_row_to_innobase()
  -> row_ins_step(thr)
  -> row_ins_index_entry_step() -> row_ins_clust_index_entry() (row0ins.cc) -> row_ins_clust_index_entry_low()
  -> btr_cur_optimistic_insert() : this one finally lead to a btree operation, this is the close of the inseart call or in other words end layer of it.

code path read from https://dev.mysql.com/doc/internals/en/guided-tour-chunk.html to get clear on the first half before reaching the ha_innobase::write_row()
---------------------------------------
---------------------------------------
---------------------------------------
the following code path are done for going through the path for mysql start to finish an update.
- DO remember that connection is a connection, it is not necessarily have 1 sql query or transtraction only!!!!!!!!!!!
- When connection is ready, the client even havent send out any query command to the server!!!!!!!!

// /sql/mysqld.cc
main() {
  ...
  // initialize the mysql server data stucture etc
  mysqld_socket_acceptor->connection_event_loop();
  // if the above loop is done, mysqld is shutting down
}

// /sql/conn_handler/connection_acceptor.cc
connection_event_loop() {
    while(!abort()) {
      wait_for_conn();
      Connection_handler_manager::process_new_connection();
    }
}

// /sql/conn_handler/connection_acceptor.cc
process_new_connection() {
    ....
    Per_thread_connection_handler::add_connection();
}

Per_thread_connection_handler::add_connection() {
    mysql_thread_create(); -> which is a definition of my_thread_create(); // mysql_thread.cc where my_thread_handle* is the passed in handler and will be executed in a new pthread to do the job.
    // the handler is implemented with C in static void *handle_connection(void *arg) {} in connection_handler_per_thread.cc
    
    init_new_thd(channel_info) {
       channel_info->create_thd();
       thd_set_thread_stack(thd, (char *)&thd); // this only do one thing: set the stack address, nothing else
       store_globals(); // store some thread info
    }
    
    
    thd_prepare_connection(thd) {
      login_connection(); // auth user
      
      thd_prepare_connection();
      while (thd_connection_alive(thd)) {
        if (do_command(thd)) break;
        // in do_command in sql_parse.cc, it will figure out command and do
        //return_value = dispatch_command(thd, &com_data, command);
      }
    }
    
    // this should connects with the mysql_update following
    
    //  sql/conn_handler/channel_info.h and .cc plays a role in passing the start time stamp down and some other methods as well, the parser is actually going to decide what is going
    // to be done and how it is going to be done lol.
    
}

/**
  Read one command from connection and execute it (query or simple command).
  This function is called in loop from thread function.

  For profiling to work, it must never be called recursively.

  @retval
    0  success
  @retval
    1  request of thread shutdown (see dispatch_command() description)
*/
do_command(thd) {
    my_net_set_read_timeout(net, thd->variables.net_wait_timeout); // blocking call on getting trans
    
    ... // verify command correctnexx etc
    
    ... // refresh command read time out value to let the connection stay alive \
    
    return_value = dispatch_command(thd, &com_data, command); // dispatch and execute the command
}

dispatch_command() {
  switch (CMD) {
    ....
    COM_QUERY: // this is a command of type sql query, check payload on the query details and execute it 
               // the query is in a string format https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_com_query.html
       mysql_parse(thd, &parser_state); // this will some how go to mysql_execute_command(); in sql_parse.cc int SQLCOM_UPDATE
       .....
  }
}

mysql_parse() {
   mysql_execute_command();
}

mysql_execute_command() {
    //query planning etc
    ...
    switch(sql_command):
      ...
      SQLCOM_UPDATE:
        res = lex->m_sql_cmd->execute(thd); 
        // lex is defined in sql_lex.cc and sql_lex.h.
        // m_sql_cmd is of type   Sql_cmd *m_sql_cmd; from /sql/sql_cmd.h
        // some one is implementing this interface for execute() -> that is class Sql_cmd_call : public Sql_cmd_dml in /sql/sql_call.h and .cc
        break;
     ...
   
}

// sql_update.h has the implementation for Sql_cmd_dml.h
// Sql_cmd_update -> Sql_cmd_dml -> Sql_cmd
class Sql_cmd_update final : public Sql_cmd_dml {
   execute() // this is the important one but we can't find it for some reason, If the statement is already prepared, this step is skipped...... wtf https://dev.mysql.com/doc/dev/mysql-server/8.0.12/group__Query__Optimizer.html#ga527256fa79632df61f4c0900c4df0a8c
   // then ??? how this works

}


/* mysql 8.0 version*/

bool Sql_cmd_update::execute_inner(THD *thd) {
  update_single_table(); // there is a multiple table version as well in sql_update.cc. execute should call it, at least true for insert
}

bool Sql_cmd_update::update_single_table(THD *thd) {
    ....
    table->file->ha_update_row(table->record[1], table->record[0]); // there is a batch version in another code path
}

/* mysql 5.7.12 version
*/
bool mysql_update() { // refactored, now it is Query_result_update::do_updates() it seems in sql_update.cc
  // crazy optimizers ***
  ...
  // read
  init_read_record(); 
  ...
   while (true) {
       if (error || thd.killed) {
           break;
       }
       
       if (will_batch) {
           error= table->file->ha_bulk_update_row(); // in mysql 8.0 we are still doing ha_update_row() to call innodb handler etc, the outer logic changed a bit in detail
       } else {
           error= table->file->ha_update_row();
       }
   }
}


ha_update_row() {
   ha_innobase::update_row(); // => here we get to innodb, yeah!!!!
}

// ha_inoodb.cc
update_row() {
    //....
    uvect = row_get_prebuilt_update_vector(m_prebuilt);
    
    error = calc_row_difference(uvect, old_row, new_row, table, m_upd_buf,
                              m_upd_buf_size, m_prebuilt, m_user_thd);
    
    innobase_srv_conc_enter_innodb(m_prebuilt);

    error = row_update_for_mysql((byte *)old_row, m_prebuilt);
}



https://dev.mysql.com/doc/internals/en/guided-tour-skeleton.html

row_update_for_mysql((byte *)old_row, m_prebuilt) {
  ....
  // prepare m_prebuild if not yet initialized, allocate memory, build update node in update graph ??? etc
  ....
  // check if tx is already aborted
  ....
  /** Enter InnoDB engine after checking the max number of user threads
     allowed, else the thread is put into sleep.
     @param[in,out]	prebuilt	row prebuilt handler */
  innobase_srv_conc_enter_innodb(row_prebuilt_t *prebuilt);
  
  row_update_for_mysql();
  
  // if has auto increment field, update it as well
  row_upd_get_new_autoinc_counter();
  
  // error handling etc
}

/** Does an update or delete of a row for MySQL.
    @param[in]	mysql_rec	row in the MySQL format
    @param[in,out]	prebuilt	prebuilt struct in MySQL handle
    @return error code or DB_SUCCESS */
    // row0mysql.cc
dberr_t row_update_for_mysql(const byte *mysql_rec, row_prebuilt_t *prebuilt)
    MY_ATTRIBUTE((warn_unused_result)) {
    // staff iunside this shit is complicated btree actions in multiple methods
    if (prebuilt->table->is_intrinsic()) {
    //  update the role
    return (row_del_upd_for_mysql_using_cursor(mysql_rec, prebuilt));
  } else {
    ut_a(prebuilt->template_type == ROW_MYSQL_WHOLE_ROW);
    return (row_update_for_mysql_using_upd_graph(mysql_rec, prebuilt));
  }
}

    
    
---------------
some random staff on the update code path

need to check what is in m_prebuilt:
uvect = row_get_prebuilt_update_vector(m_prebuilt);

/** Allocates and zero-fills n bytes of memory from a memory heap.
@param[in]	heap	memory heap
@param[in]	n	number of bytes; if the heap is allowed to grow into
the buffer pool, this must be <= MEM_MAX_ALLOC_IN_BUF
@return allocated, zero-filled storage */
UNIV_INLINE
void *mem_heap_zalloc(mem_heap_t *heap, ulint n) {
  ut_ad(heap);
  ut_ad(!(heap->type & MEM_HEAP_BTR_SEARCH));
  return (memset(mem_heap_alloc(heap, n), 0, n));
}

http://mysql.rjweb.org/doc.php/memory
https://dev.mysql.com/doc/refman/5.6/en/memory-use.html
https://dev.mysql.com/doc/refman/8.0/en/memory-use.html
InnoDB allocates memory for the entire buffer pool at server startup, using malloc()

memory allocation eventually would call mem_heap_create_block_func() to get new block. this is in memory.cc

if (dynamic || len < PAGE_SIZE / 2) 
   block = static_cast<mem_block_t *>(ut_malloc_nokey(len));
else 
   if MEM_HEAP_BTR_SEARCH
      ... something I am not sure, seems heap already have the mnemory allocated
   else 
      buf_block = buf_block_alloc(nullptr); // seems using buffer pool memory which is already allocated up on engine start
      // this is related to buffer pool LRU etc to get a page, seems interesting as buffer pool could be used for update etc?


mini transaction (so called mtr - mtr_t)


