Disk
Problem to consider: partial write during power off, only one sector write is automic


Disk is organized into sectors
- physical disk: 512 Byte
- SSD: 4KB

File system map sectors to blocks
- usually one block is 16KB (this is also the default innodb page size)

Os file system uses inode:
The inode (index node) is a data structure in a Unix-style file system that describes a file-system object such as a file or a directory. Each inode stores the attributes and disk block locations of the object's data.[1] File-system object attributes may include metadata (times of last change,[2] access, modification), as well as owner and permission data.[3]
Directories are lists of names assigned to inodes. A directory contains an entry for itself, its parent, and each of its children.


InnoDB
- default page size is 16KB
  - besides header, page is mostly used for store actual data
- InnoDB allocate disk space with unit of extent for performance
  - extent is 1MB, contains 64 consequetive pages
  - extent uses bit map to store page usage status
  
- above extent is segment
  - A File Segment is a logical unit which is a collection of Pages and Extents.
  - Itâ€™s to make the page management easy. So once we delete the File Segment, we know which all extents and pages are to be freed.
  - the allocation step size is increasing as the usage is increasing
  - segment can be separated as leaf segment and non-leaf segment
  - each segment has its own inode, it should be a separate file at os level
  
- above segment is tablespace
  - allocation is from low page offset to high 

general file (logical) structure in innoDB:
-tablespace
 -segments
  -extents
    -pages
     -rows
     
==========================
Async io

Mysql has multiple options for this, we are focusing on the simulated async io. The main target is to understand what it is trying to do
and how async io staff works.

Slot struct: this is the async io context information, note it is just context, not including functionality implementation

class AIO: async io array structure

/** Static declarations */ these are arries of async io
AIO *AIO::s_reads;
AIO *AIO::s_writes;
AIO *AIO::s_ibuf;
AIO *AIO::s_log;
AIO *AIO::s_sync; // this one is the sync array,. it doesn't need io handler

/** Simulated AIO handler for reaping IO requests */
class SimulatedAIOHandler {} // line 7214

  /** If there are at least 2 seconds old requests, then pick the
  oldest one to prevent starvation.  If several requests have the
  same age, then pick the one at the lowest offset.
  @return true if request was selected */
  bool select() {
    if (!select_oldest()) {
      return (select_lowest_offset());
    }

    return (true);
  }

line 7662:
// Note: We don't support write combining for simulated AIO.

WTF

os_aio_simulated_handler() does async io actually

m_array is an AIO object!!!!!!!!! ??????? which makes sense actually

SimulatedAIOHandler::check_pending ??? wtf is this thing doing????

Call stack
srv_start() // doing os_thread_create -> io_handler_thread() // srv0start.cc ->fil_aio_wait() //fil0fil.cc -> os_aio_handler() //os0file.cc -> os_aio_simulated_handler() // if we are using simulated_handler -> os calls

io_handler_thread() {
  while( not shut down && not all slot empty) {
    fil_aio_wait();
  }
}

------------
The following includes the info on implementation of the file operations:

//fil0fil.cc
/** The tablespace memory cache; also the totality of logs (the log
data space) is stored here; below we talk about tablespaces, but also
the ib_logfiles form a 'space' and it is handled here */
// this appears to be representing the whole file system, not specific to the table space.
class Fil_system {
  vextor<File_shard>;
 
  // on construction, a list of shards are initialized, each has its own lock
}

/**
 * This is a sharding data structure, each represents a shard of the whole data in file system, which seems mapping to a single file.
 * Note this is not 1:1 mapping to table space, it can have many table space inside one file, this can be observed in fil_space_t *get_space_by_name(const char *name)
 * I think the 1:1 mapping only happens when file per table is enabled
*/
class Fil_shard {
  friend class Fil_system;
}
